import * as fs from 'fs';

import ProgressBar from 'progress';
import { Application, ProjectReflection, UrlMapping } from 'typedoc';
import { RendererEvent } from 'typedoc/dist/lib/output/events';

import { PluginOptions } from './types';

export async function render(
  project: ProjectReflection,
  outputDirectory: string,
) {
  if (
    !this.prepareTheme() ||
    !isOutputDirectory(this.application, outputDirectory)
  ) {
    return;
  }

  const output = new RendererEvent(
    RendererEvent.BEGIN,
    outputDirectory,
    project,
  );

  output.settings = this.application.options.getRawValues();
  output.urls = this.theme!.getUrls(project);

  if (output.urls) {
    const bar = new ProgressBar('Rendering [:bar] :percent', {
      total: output.urls.length,
      width: 40,
    });

    this.trigger(output);

    if (!output.isDefaultPrevented) {
      output.urls.forEach((mapping: UrlMapping, i) => {
        this.renderDocument(output.createPageEvent(mapping));
        bar.tick();
      });
      this.trigger(RendererEvent.END, output);
    }
  }
}

const isOutputDirectory = (app: Application, outputDirectory: string) => {
  const options = app.options.getRawValues() as PluginOptions;
  if (options.disableOutputCheck) {
    return true;
  }

  if (!fs.existsSync(outputDirectory)) {
    return true;
  }

  if (app.renderer.theme!.isOutputDirectory(outputDirectory)) {
    if (fs.existsSync(outputDirectory)) {
      fs.rmdirSync(outputDirectory, { recursive: true });
    }
    return true;
  } else {
    app.logger.error(
      `The output directory "${outputDirectory}" exists but does not seem to be a documentation generated by TypeDoc.\n` +
        'Make sure this is the right target directory, delete the folder and rerun TypeDoc.',
    );
    return false;
  }
};
