// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Declarations: should compile a an udefined 1`] = `
"• \`Let\` **undefinedNumberDeclaration**: *number*

[partial: member.sources]
"
`;

exports[`Declarations: should compile a variable with default value 1`] = `
"• \`Const\` **stringWithDefaultValueDeclaration**: *variable*= 'variable'

[partial: member.sources]
"
`;

exports[`Declarations: should compile any function type 1`] = `
"Ƭ **AnyFunctionType**<A\\\\>: (...\`input\`: *any*[]) => A

#### Type parameters:

Name | Default |
------ | ------ |
\`A\` | *any* |

[partial: member.sources]
"
`;

exports[`Declarations: should compile declaration with double underscores in name and value 1`] = `
"• \`Const\` **\\\\_\\\\_DOUBLE\\\\_UNDERSCORES\\\\_DECLARATION\\\\_\\\\_**: *typeof* [*\\\\_\\\\_DOUBLE\\\\_UNDERSCORES\\\\_DECLARATION\\\\_\\\\_*](../modules.md#__double_underscores_declaration__)

[partial: member.sources]
"
`;

exports[`Declarations: should compile enum delcaration 1`] = `
"• **Down**: = \\"DOWN\\"

[partial: member.sources]
"
`;

exports[`Declarations: should compile object literal cast as a const 1`] = `
"• \`Const\` **objectLiteralAsConstDeclaration**: object

#### Type declaration:

Name | Type | Value |
------ | ------ | ------ |
\`Prop1\` | *Prop1* | 'Prop1' |
\`Prop2\` | *Prop1* | 'Prop1' |
\`Prop3\` | *Prop1* | 'Prop1' |

[partial: member.sources]
"
`;

exports[`Declarations: should compile object literal declaration 1`] = `
"• \`Const\` **objectLiteralDeclaration**: object

#### Type declaration:

Name | Type | Value |
------ | ------ | ------ |
\`valueA\` | *number* | 100 |
\`valueB\` | *boolean* | true |
\`valueC\` | object | {} |
\`valueX\` | object | { \`valueA\`: *number*[] ; \`valueZ\`: *string* = 'foo' } |
\`valueY\` | function | () => *string* |
\`valueZ\` | *string* | 'foo' |

[partial: member.sources]
"
`;

exports[`Declarations: should compile type literal declaration 1`] = `
"• \`Let\` **typeLiteralDeclaration**: object

#### Type declaration:

Name | Type | Value | Description |
------ | ------ | ------ | ------ |
\`valueA?\` | *number* | *number* | Comments for valueA   |
\`valueB?\` | *boolean* | *boolean* | - |
\`valueX\` | object | { \`valueA\`: *number*[] ; \`valueY\`: (\`z\`: *string*) => { \`a\`: *string* ; \`b\`: *string*  } ; \`valueZ\`: *string*  } | Comment for valueX   |
\`valueY\` | function | () => *string* | - |
\`valueZ\` | *string* | *string* | Comment for valueZ   |

[partial: member.sources]
"
`;

exports[`Declarations: should compile type literal declaration 2`] = `
"• \`Let\` **typeLiteralDeclarationWithFunction**: () => *string*

#### Type declaration:

Name | Type | Value |
------ | ------ | ------ |
\`valueZ\` | *string* | *string* |

[partial: member.sources]
"
`;

exports[`Declarations: should not escape charcters within markdown code 1`] = `
"Ƭ **SpecialCharacters**: { \`this_prop_has_underscores\`: *number* ; \`this|prop|has|the|pipe|character\`: *string*  }

#### Type declaration:

Name | Type |
------ | ------ |
\`this_prop_has_underscores\` | *number* |
this\\\\|prop\\\\|has\\\\|the\\\\|pipe\\\\|character | *string* |

[partial: member.sources]
"
`;
