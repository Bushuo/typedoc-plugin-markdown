// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Types: should compile 'array' type' 1`] = `
"string[]
"
`;

exports[`Types: should compile 'intersection' type' 1`] = `"[IntersectionClassA](intersectionclassa.md) & [IntersectionClassB](intersectionclassb.md)"`;

exports[`Types: should compile 'stringLiteral' type' 1`] = `
"\\"blue\\"
"
`;

exports[`Types: should compile 'tuple' type' 1`] = `"[string, number]"`;

exports[`Types: should compile 'typeOperator' type ' 1`] = `"unique symbol"`;

exports[`Types: should compile 'union' of string literals types' 1`] = `
"\\"ease-in\\" \\\\| \\"ease-out\\" \\\\| \\"ease-in-out\\"
"
`;

exports[`Types: should compile collapsed 'function' type ' 1`] = `"function"`;

exports[`Types: should compile collapsed 'literal' type' 1`] = `"object"`;

exports[`Types: should compile collapsed 'objectLiteralType' type' 1`] = `"object"`;

<<<<<<< HEAD
exports[`Types: should compile conditional type ' 1`] = `"T *extends* string ? \\"string\\" : T *extends* number ? \\"number\\" : T *extends* boolean ? \\"boolean\\" : T *extends* undefined ? \\"undefined\\" : \\"object\\""`;

exports[`Types: should compile expanded 'function' type ' 1`] = `"\\\\<T>(arg: T) => T"`;

exports[`Types: should compile expanded 'literal' type' 1`] = `"{ valueA?: number ; valueB?: boolean ; valueX: { valueA: number[] ; valueY: (z: string) => { a: string ; b: string  } ; valueZ: string  } ; valueY: () => string ; valueZ: string  }"`;

exports[`Types: should compile expanded 'objectLiteralType' type' 1`] = `"{ <: string = \\"\\\\<foo>\\"; <foo>: string = \\"foo\\"; \\\\n: string = \\"foo\\"; _: string = \\"foo\\"; prop_with_underscore: string = \\"foo\\"; prop\`with\`backticks: string = \\"foo\\"; prop|with|pipes: string = \\"foo\\"; valueA: number = 100; valueB: boolean = true; valueZ: string = \\"\\\\_foo\\\\_\\"; |: string = \\"foo\\"; ~: string = \\"foo\\"; valueY: (cbParam: \\\\_someCallback\\\\_, unionParam: \\"a\\" \\\\| \\"b\\", \\\\_undercoreParam\\\\_: string) => string ; valueX: { valueA: number[] = [100, 200, 300]; valueZ: string = \\"foo\\"; valueY: (z: string) => { a: string = \\"test\\"; b: string = z }  }  }"`;
=======
exports[`Types: should compile expanded 'function' type ' 1`] = `"<T\\\\>(arg: T) => T"`;

exports[`Types: should compile expanded 'literal' type' 1`] = `"{ valueA?: number ; valueB?: boolean ; valueX: { valueA: number[] ; valueY: (z: string) => { a: string ; b: string  } ; valueZ: string  } ; valueY: () => string ; valueZ: string  }"`;

exports[`Types: should compile expanded 'objectLiteralType' type' 1`] = `"{ <: string = \\"<foo\\\\>\\"; <foo>: string = \\"foo\\"; \\\\n: string = \\"foo\\"; _: string = \\"foo\\"; prop_with_underscore: string = \\"foo\\"; prop\`with\`backticks: string = \\"foo\\"; prop|with|pipes: string = \\"foo\\"; valueA: number = 100; valueB: boolean = true; valueZ: string = \\"\\\\_foo\\\\_\\"; |: string = \\"foo\\"; ~: string = \\"foo\\"; valueY: (cbParam: [\\\\_someCallback\\\\_](../modules/_signatures_.md#_somecallback_), unionParam: \\\\\\"a\\\\\\" \\\\| \\\\\\"b\\\\\\", \\\\_undercoreParam\\\\_: string) => string ; valueX: { valueA: number[] = [100, 200, 300]; valueZ: string = \\"foo\\"; valueY: (z: string) => { a: string = \\"test\\"; b: string = z }  }  }"`;
>>>>>>> master

exports[`Types: should compile intrinsic type' 1`] = `"string"`;

exports[`Types: should compile unionType with object literal type ' 1`] = `"string \\\\| { z: string  }"`;
