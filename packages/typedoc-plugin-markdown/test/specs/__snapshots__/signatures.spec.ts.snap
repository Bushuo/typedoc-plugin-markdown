// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Signatures: should compile callable signature' 1`] = `
"▸ **CallableSignature**(): *string*

**Returns:** *string*
"
`;

exports[`Signatures: should compile function that returns a function' 1`] = `
"▸ **functionReturningAFunction**(): *function*

**Returns:** () => *boolean*
"
`;

exports[`Signatures: should compile function that returns an object' 1`] = `
"▸ **functionReturningAnObject**(): *object*

**Returns:** *object*

| Name | Type |
| :------ | :------ |
| \`x\` | *number* |
| \`y\` | *number* |
"
`;

exports[`Signatures: should compile function with nested typen params' 1`] = `
"▸ **functionWithNestedParams**(\`params\`: { \`name\`: *string* ; \`nestedObj\`: { \`name\`: *string* ; \`obj\`: { \`name\`: () => *void*  } ; \`value\`: *number*  } ; \`parent?\`: *number*  }, \`context\`: *any*): *boolean*

Some nested params.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`params\` | *object* | The parameters passed to the method. |
| \`params.name\` | *string* | The name of the new group. |
| \`params.nestedObj\` | *object* | A nested object. |
| \`params.nestedObj.name\` | *string* | - |
| \`params.nestedObj.obj\` | *object* | - |
| \`params.nestedObj.obj.name\` | () => *void* | - |
| \`params.nestedObj.value\` | *number* | - |
| \`params.parent?\` | *number* | - |
| \`context\` | *any* | The context of the method call. |

**Returns:** *boolean*
"
`;

exports[`Signatures: should compile function with reference type' 1`] = `
"▸ **functionWithReferenceType**(\`descriptor\`: *TypedPropertyDescriptor*<any\\\\>): *boolean*

#### Parameters

| Name | Type |
| :------ | :------ |
| \`descriptor\` | *TypedPropertyDescriptor*<any\\\\> |

**Returns:** *boolean*
"
`;

exports[`Signatures: should compile named parameters with comments' 1`] = `
"▸ **functionWithNamedParamsAndComments**(\`__namedParameters?\`: { \`bar?\`: *number* ; \`foo?\`: *number*  }, \`anotherParam\`: *string*): *void*

FOO

#### Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`__namedParameters\` | *object* | {} | various options |
| \`__namedParameters.bar?\` | *number* | - | Another value |
| \`__namedParameters.foo?\` | *number* | - | An interesting value |
| \`anotherParam\` | *string* | - | - |

**Returns:** *void*
"
`;

exports[`Signatures: should compile named parameters' 1`] = `
"▸ **functionWithNamedParams**(\`__namedParameters\`: *Object*): *string*

#### Parameters

| Name | Type |
| :------ | :------ |
| \`__namedParameters\` | *Object* |

**Returns:** *string*
"
`;

exports[`Signatures: should compile pipes in params and comments' 1`] = `
"▸ **functionWithPipesInParamsAndComments**(\`n\`: *number* \\\\| \`\`null\`\`): *number* \\\\| \`\`null\`\`

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`n\` | *number* \\\\| \`\`null\`\` | a\\\\|b |

**Returns:** *number* \\\\| \`\`null\`\`
"
`;

exports[`Signatures: should compile signature with @return comments' 1`] = `
"▸ **commentsInReturn**(): *boolean*

Comments with a return definition

**Returns:** *boolean*

Return comments
"
`;

exports[`Signatures: should compile signature with a flag' 1`] = `
"▸ \`Private\` **privateFunction**(): *string*

**Returns:** *string*
"
`;

exports[`Signatures: should compile signature with default values' 1`] = `
"▸ **functionWithDefaults**(\`valueA?\`: *string*, \`valueB?\`: *number*, \`valueC?\`: *number*, \`valueD?\`: *boolean*, \`valueE?\`: *boolean*, \`valueF?\`: *string*): *string*

This is a function with a parameter that has a default value.

#### Parameters

| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`valueA\` | *string* | 'defaultValue' | A parameter with a default string value. |
| \`valueB\` | *number* | 100 | A parameter with a default numeric value. |
| \`valueC\` | *number* | - | A parameter with a default NaN value. |
| \`valueD\` | *boolean* | true | A parameter with a default boolean value. |
| \`valueE\` | *boolean* | null | A parameter with a default null value. |
| \`valueF\` | *string* | '<foo\\\\>' | - |

**Returns:** *string*
"
`;

exports[`Signatures: should compile signature with optional params' 1`] = `
"▸ **functionWithOptionalParam**(\`requiredParam\`: *string*, \`optionalParam?\`: *string*): *void*

This is a function with a parameter that is optional.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`requiredParam\` | *string* | A normal parameter. |
| \`optionalParam?\` | *string* | An optional parameter. |

**Returns:** *void*
"
`;

exports[`Signatures: should compile signature with params' 1`] = `
"▸ **functionWithParameters**(\`paramZ\`: *string*, \`paramG\`: *any*, \`paramA\`: *any*): *number*

This is a function with multiple arguments and a return value.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`paramZ\` | *string* | This is a string parameter. |
| \`paramG\` | *any* | This is a parameter flagged with any.<br />     This sentence is placed in the next line. |
| \`paramA\` | *any* | This is a **parameter** pointing to an interface. |

**Returns:** *number*
"
`;

exports[`Signatures: should compile signature with rest params' 1`] = `
"▸ **functionWithRest**(...\`rest\`: *string*[]): *string*

This is a function with rest parameter.

#### Parameters

| Name | Type | Description |
| :------ | :------ | :------ |
| \`...rest\` | *string*[] | The rest parameter. |

**Returns:** *string*
"
`;

exports[`Signatures: should compile signature with type params' 1`] = `
"▸ \`Const\` **functionWithTypeParams**<Item\\\\>(): *boolean*

#### Type parameters

| Name | Default |
| :------ | :------ |
| \`Item\` | *string* \\\\| *boolean* |

**Returns:** *boolean*
"
`;

exports[`Signatures: should compile signature with union types' 1`] = `
"▸ **functionWithUnionTypes**(\`arg\`: *boolean*[] \\\\| *number*, ...\`args\`: (*string* \\\\| *number*)[]): *any*

#### Parameters

| Name | Type |
| :------ | :------ |
| \`arg\` | *boolean*[] \\\\| *number* |
| \`...args\` | (*string* \\\\| *number*)[] |

**Returns:** *any*
"
`;
